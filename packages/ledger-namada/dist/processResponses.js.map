{"version":3,"file":"processResponses.js","sourceRoot":"","sources":["../src/processResponses.ts"],"names":[],"mappings":"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","sourcesContent":["/** ******************************************************************************\n *  (c) 2018 - 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ******************************************************************************* */\n\nimport { errorCodeToString } from './common'\nimport { PK_LEN_PLUS_TAG, SALT_LEN, SIG_LEN_PLUS_TAG } from './config'\nimport { ISignature } from './types'\n\nexport function getSignatureResponse(response: Buffer): ISignature {\n  // App sign response: [ pubkey(33) | raw_salt(8) | raw_signature(65) | wrapper_salt(8) | wrapper_signature(65) |\n  // raw_indices_len(1) | wrapper_indices_len(1) | indices(wrapper_indices_len) ]\n\n  let offset = 0;\n  const pubkey = Buffer.from(response.subarray(offset, offset + PK_LEN_PLUS_TAG));\n\n  offset += PK_LEN_PLUS_TAG;\n  const raw_salt = Buffer.from(response.subarray(offset, offset + SALT_LEN));\n  offset += SALT_LEN;\n  const raw_signature = Buffer.from(response.subarray(offset, offset + SIG_LEN_PLUS_TAG));\n\n  offset += SIG_LEN_PLUS_TAG;\n  const wrapper_salt = Buffer.from(response.subarray(offset, offset + SALT_LEN));\n  offset += SALT_LEN;\n  const wrapper_signature = Buffer.from(response.subarray(offset, offset + SIG_LEN_PLUS_TAG));\n\n  offset += SIG_LEN_PLUS_TAG;\n  const raw_indices_len = response[offset];\n  offset += 1;\n  const raw_indices = Buffer.from(response.subarray(offset, offset + raw_indices_len))\n  offset += raw_indices_len;\n\n  const wrapper_indices_len = response[offset];\n  offset += 1;\n  const wrapper_indices = Buffer.from(response.subarray(offset, offset + wrapper_indices_len))\n  offset += wrapper_indices_len;\n\n  return {\n    pubkey,\n    raw_salt,\n    raw_signature,\n    wrapper_salt,\n    wrapper_signature,\n    raw_indices,\n    wrapper_indices,\n  }\n}\n\nexport function processGetAddrResponse(response: Buffer) {\n  const errorCodeData = response.subarray(-2)\n  const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n  const publicKey = Buffer.from(response.subarray(0, PK_LEN_PLUS_TAG))\n  const address = Buffer.from(response.subarray(PK_LEN_PLUS_TAG, -2))\n\n  return {\n    publicKey,\n    address,\n    returnCode,\n    errorMessage: errorCodeToString(returnCode),\n  }\n}\n\n// Not used yet\n// function processGetShieldedAddrResponse(response: Buffer) {\n//   console.log(\"Processing get address response\")\n\n//   let partialResponse = response\n\n//   const errorCodeData = partialResponse.slice(-2)\n//   const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n//   //get public key len (variable)\n//   const raw_pkd = Buffer.from(partialResponse.slice(0, 32))\n\n//   //\"advance\" buffer\n//   partialResponse = partialResponse.slice(32)\n\n//   // get the length of the bech32m address\n//   const bech32m_len = partialResponse[0]\n\n//   //\"advance\" buffer\n//   partialResponse = partialResponse.slice(1)\n\n//   // get the bech32m encoding of the shielded address\n//   const bech32m_addr = Buffer.from(partialResponse.slice(0, bech32m_len))\n\n//   return {\n//     raw_pkd,\n//     bech32m_len,\n//     bech32m_addr,\n//     returnCode,\n//     errorMessage: errorCodeToString(returnCode),\n//   }\n// }\n\n// function processIncomingViewingKeyResponse(response: Buffer) {\n//   console.log(\"Processing get IVK response\")\n\n//   const partialResponse = response\n\n//   const errorCodeData = partialResponse.slice(-2)\n//   const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n//   //get public key len (variable)\n//   const raw_ivk = Buffer.from(partialResponse.slice(0, 32))\n\n//   return {\n//     raw_ivk,\n//     returnCode,\n//     errorMessage: errorCodeToString(returnCode),\n//   }\n// }\n\n// function processNullifierResponse(response: Buffer) {\n//   console.log(\"Processing get nullifier response\")\n\n//   const partialResponse = response\n\n//   const errorCodeData = partialResponse.slice(-2)\n//   const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n//   const raw_nf = Buffer.from(partialResponse.slice(0, 32))\n\n//   return {\n//     raw_nf,\n//     returnCode,\n//     errorMessage: errorCodeToString(returnCode),\n//   }\n// }\n\n// function processOutgoingViewingKeyResponse(response: Buffer) {\n//   console.log(\"Processing get OVK response\")\n\n//   const partialResponse = response\n\n//   const errorCodeData = partialResponse.slice(-2)\n//   const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n//   //get public key len (variable)\n//   const raw_ovk = Buffer.from(partialResponse.slice(0, 32))\n\n//   return {\n//     raw_ovk,\n//     returnCode,\n//     errorMessage: errorCodeToString(returnCode),\n//   }\n// }\n"]}