/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_wallet_free(a: number): void;
export function __wbg_derivedaccount_free(a: number): void;
export function __wbg_extendedkeys_free(a: number): void;
export function wallet_new(a: number, b: number, c: number, d: number, e: number): void;
export function wallet_derive(a: number, b: number, c: number, d: number): void;
export function wallet_get_extended_keys(a: number, b: number, c: number, d: number): void;
export function wallet_serialize(a: number, b: number): void;
export function wallet_extended_keys(a: number, b: number, c: number, d: number): void;
export function wallet_account(a: number, b: number, c: number, d: number): void;
export function __wbg_tx_free(a: number): void;
export function run(): void;
export function __wbg_account_free(a: number): void;
export function account_init(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function __wbg_transfer_free(a: number): void;
export function transfer_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number): void;
export function transfer_new_shielded(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number): void;
export function __wbg_mnemonic_free(a: number): void;
export function mnemonic_new(a: number): number;
export function mnemonic_phrase(a: number, b: number): void;
export function mnemonic_from_phrase(a: number, b: number): number;
export function mnemonic_to_encrypted(a: number, b: number, c: number, d: number): void;
export function mnemonic_from_encrypted(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_transaction_free(a: number): void;
export function __wbg_ibctransfer_free(a: number): void;
export function ibctransfer_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_from_pointer_to_js_value(a: number): number;
export function keypair_from_js_value_to_pointer(a: number, b: number): void;
export function keypair_secret(a: number, b: number): void;
export function keypair_to_bytes(a: number, b: number): void;
export function __wbg_wrappertx_free(a: number): void;
export function rustsecp256k1_v0_4_1_context_create(a: number): number;
export function rustsecp256k1_v0_4_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_4_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_4_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
